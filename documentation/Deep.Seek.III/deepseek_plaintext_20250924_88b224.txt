SISTEMA_FACTORING_COMPLETO:

// ==============================================
// FASE 1: ORIGINACIÓN (CREACIÓN DE OPERACIONES)
// ==============================================

FUNCION PROCESAR_ORIGINACION(lote_facturas):
    SI lote_facturas ESTÁ_VACÍO ENTONCES
        RETORNAR {"error": "Lote vacío"}
    FIN SI
    
    // DECISIÓN AGREGADA DE COMISIÓN (Nivel lote)
    capital_total = 0
    comision_fija_total = 0
    
    PARA CADA factura EN lote_facturas HACER:
        capital_total = capital_total + (factura.monto_factura_neto × factura.tasa_avance)
        comision_fija_total = comision_fija_total + factura.comision_minima
    FIN PARA
    
    comision_pct_total = capital_total × lote_facturas[0].comision_porcentual
    
    // Elegir método que genere MAYOR comisión
    SI comision_pct_total > comision_fija_total ENTONCES:
        metodo_comision = "PORCENTAJE"
    SINO:
        metodo_comision = "FIJO"
    FIN SI
    
    // PROCESAMIENTO INDIVIDUAL
    resultados = []
    
    PARA CADA factura EN lote_facturas HACER:
        capital_operacion = factura.monto_factura_neto × factura.tasa_avance
        
        // Aplicar método de comisión decidido
        SEGUN metodo_comision:
            CASO "PORCENTAJE":
                comision = capital_operacion × factura.comision_porcentual
            CASO "FIJO":
                comision = factura.comision_minima
        FIN SEGUN
        
        // CÁLCULO DE INTERESES (Fórmula Excel)
        tasa_diaria = factura.tasa_interes_mensual / 30
        factor_interes = (1 + tasa_diaria) ^ factura.plazo_dias
        interes_compensatorio = capital_operacion × (factor_interes - 1)
        
        // CÁLCULO DE IGV
        igv_interes = interes_compensatorio × 0.18
        igv_comision = comision × 0.18
        
        // MONTO A DESEMBOLSAR (Neto de cargos)
        monto_desembolsado = capital_operacion - interes_compensatorio - igv_interes - comision - igv_comision
        
        // COMISIÓN AFILIACIÓN (Opcional)
        SI factura.aplica_comision_afiliacion ENTONCES:
            comision_afiliacion = factura.comision_afiliacion
            igv_afiliacion = comision_afiliacion × 0.18
            monto_desembolsado = monto_desembolsado - comision_afiliacion - igv_afiliacion
        FIN SI
        
        // CONSTRUIR RESULTADO
        operacion = {
            capital_operacion: capital_operacion,
            interes_compensatorio: interes_compensatorio,
            igv_interes: igv_interes,
            comision_estructuracion: comision,
            monto_desembolsado: monto_desembolsado,
            fecha_desembolso: FECHA_ACTUAL,
            fecha_vencimiento: FECHA_ACTUAL + factura.plazo_dias
        }
        
        AGREGAR operacion A resultados
    FIN PARA
    
    RETORNAR {
        metodo_comision_elegido: metodo_comision,
        resultados_por_factura: resultados
    }
FIN FUNCION

// ==============================================
// FASE 2: LIQUIDACIÓN (CORREGIDA)
// ==============================================

FUNCION LIQUIDAR_OPERACION(operacion, fecha_pago, monto_pagado):
    // VALIDACIONES INICIALES
    SI operacion ES NULO O fecha_pago ES NULO ENTONCES:
        RETORNAR {"error": "Datos incompletos"}
    FIN SI
    
    // CÁLCULO DE DÍAS TRANSCURRIDOS
    dias_transcurridos = fecha_pago - operacion.fecha_desembolso
    SI dias_transcurridos < 0 ENTONCES:
        RETORNAR {"error": "Fecha de pago inválida"}
    FIN SI
    
    // INTERESES COMPENSATORIOS DEVENGADOS (Misma fórmula que originación)
    tasa_diaria = operacion.tasa_interes_mensual / 30
    factor_devengado = (1 + tasa_diaria) ^ dias_transcurridos
    interes_devengado = operacion.capital_operacion × (factor_devengado - 1)
    igv_interes_devengado = interes_devengado × 0.18
    
    // INTERESES MORATORIOS (Si hay mora)
    interes_moratorio = 0
    igv_moratorio = 0
    dias_mora = 0
    
    SI fecha_pago > operacion.fecha_vencimiento ENTONCES:
        dias_mora = fecha_pago - operacion.fecha_vencimiento
        factor_moratorio = (1 + tasa_moratoria/30) ^ dias_mora
        interes_moratorio = operacion.capital_operacion × (factor_moratorio - 1)
        igv_moratorio = interes_moratorio × 0.18
    FIN SI
    
    // ✅✅✅ CORRECCIÓN CRÍTICA: DELTA CAPITAL = CAPITAL OPERACIÓN - PAGO
    delta_intereses = interes_devengado - operacion.interes_compensatorio
    delta_igv_intereses = igv_interes_devengado - operacion.igv_interes
    delta_capital = operacion.capital_operacion - monto_pagado  // ← CORREGIDO
    
    // SALDO GLOBAL (Suma de todos los componentes)
    saldo_global = delta_intereses + delta_igv_intereses + interes_moratorio + igv_moratorio + delta_capital
    
    // CLASIFICACIÓN EN 6 CASOS
    estado, accion = CLASIFICAR_CASO(delta_intereses, delta_capital, saldo_global)
    
    // RESULTADO DE LIQUIDACIÓN
    RETORNAR {
        fecha_liquidacion: fecha_pago,
        dias_transcurridos: dias_transcurridos,
        interes_devengado: interes_devengado,
        delta_intereses: delta_intereses,
        delta_capital: delta_capital,  // ← VARIABLE CORREGIDA
        saldo_global: saldo_global,
        estado_operacion: estado,
        accion_recomendada: accion
    }
FIN FUNCION

// ==============================================
// CLASIFICACIÓN DE CASOS (MATRIZ DE DECISIÓN)
// ==============================================

FUNCION CLASIFICAR_CASO(delta_intereses, delta_capital, saldo_global):
    // CASO 1: Exceso en todo → Devolución completa
    SI delta_intereses < 0 Y delta_capital < 0 Y saldo_global < 0 ENTONCES:
        RETORNAR "LIQUIDADO - Caso 1", "Generar NC, devolver dinero al cliente"
    
    // CASO 2: Exceso intereses, falta capital → NC + Nuevo calendario
    SI delta_intereses < 0 Y delta_capital > 0 Y saldo_global > 0 ENTONCES:
        RETORNAR "EN PROCESO - Caso 2", "Generar NC, crear nuevo calendario"
    
    // CASO 3: Falta intereses, falta capital → Facturar + Nuevo calendario
    SI delta_intereses > 0 Y delta_capital > 0 Y saldo_global > 0 ENTONCES:
        RETORNAR "EN PROCESO - Caso 3", "Facturar más intereses, nuevo calendario"
    
    // CASO 4: Falta intereses, exceso capital → Facturar + Evaluar
    SI delta_intereses > 0 Y delta_capital < 0 Y saldo_global > 0 ENTONCES:
        RETORNAR "EN PROCESO - Caso 4", "Facturar intereses, evaluar moratorios"
    
    // CASO 5: Falta intereses, exceso capital → Facturar + Devolver
    SI delta_intereses > 0 Y delta_capital < 0 Y saldo_global < 0 ENTONCES:
        RETORNAR "LIQUIDADO - Caso 5", "Facturar intereses, devolver exceso"
    
    // CASO 6: Exceso intereses, falta capital → NC + Devolución
    SI delta_intereses < 0 Y delta_capital > 0 Y saldo_global < 0 ENTONCES:
        RETORNAR "LIQUIDADO - Caso 6", "Generar NC, devolver saldo negativo"
    
    // CASO NO CLASIFICADO
    RETORNAR "NO CLASIFICADO", "Revisión manual requerida"
FIN FUNCION

// ==============================================
// FLUJO PRINCIPAL DEL SISTEMA
// ==============================================

PROGRAMA PRINCIPAL:
    // 1. ORIGINACIÓN: Crear operaciones de factoring
    facturas = [
        {
            monto_factura_neto: 20000,
            tasa_avance: 0.85,
            tasa_interes_mensual: 0.02,
            plazo_dias: 90,
            comision_porcentual: 0.015,
            comision_minima: 150
        }
    ]
    
    resultado_originacion = PROCESAR_ORIGINACION(facturas)
    
    // 2. ESPERAR PAGO DEL CLIENTE
    operacion = resultado_originacion.resultados_por_factura[0]
    fecha_pago_recibido = "2025-03-15"
    monto_pagado = 17000
    
    // 3. LIQUIDACIÓN: Procesar el pago recibido
    resultado_liquidacion = LIQUIDAR_OPERACION(operacion, fecha_pago_recibido, monto_pagado)
    
    // 4. EJECUTAR ACCIÓN SEGÚN CLASIFICACIÓN
    SEGUN resultado_liquidacion.estado_operacion:
        CASO "LIQUIDADO":
            EJECUTAR_DEVOLUCION(resultado_liquidacion.saldo_global)
            CERRAR_OPERACION(operacion)
        
        CASO "EN PROCESO":
            GENERAR_NUEVO_CALENDARIO(operacion, resultado_liquidacion)
            FACTURAR_INTERESES_ADICIONALES(resultado_liquidacion.delta_intereses)
        
        CASO "NO CLASIFICADO":
            ENVIAR_REVISION_MANUAL(operacion, resultado_liquidacion)
    FIN SEGUN
    
    // 5. GENERAR REPORTE
    GENERAR_REPORTE(resultado_liquidacion)
FIN PROGRAMA

// ==============================================
// FUNCIONES AUXILIARES
// ==============================================

FUNCION VALIDAR_CONTRA_EXCEL():
    // Validación específica con datos del Excel corregido
    capital_excel = 17822.00536953091
    pago_liq1 = 18000
    
    // Cálculo CORRECTO (usando capital_operacion)
    delta_capital_correcto = capital_excel - pago_liq1  // -177.99 ✅
    
    // Cálculo INCORRECTO (usando monto_desembolsado)
    monto_desembolsado = 16244.94
    delta_capital_incorrecto = monto_desembolsado - pago_liq1  // -1755.06 ❌
    
    RETORNAR {
        correccion_aplicada: VERDADERO,
        diferencia: 1577.07,
        coincide_excel: delta_capital_correcto == -177.99
    }
FIN FUNCION

FUNCION EJECUTAR_DEVOLUCION(monto_devolucion):
    SI monto_devolucion < 0 ENTONCES:
        // Monto negativo = Inandes debe devolver
        GENERAR_NOTA_CREDITO(ABS(monto_devolucion))
        PROCESAR_TRANSFERENCIA_CLIENTE(ABS(monto_devolucion))
    FIN SI
FIN FUNCION

FUNCION GENERAR_NUEVO_CALENDARIO(operacion, liquidacion):
    // Crear nuevo calendario de pagos basado en saldo pendiente
    nuevo_plazo = CALCULAR_PLAZO_OPTIMO(liquidacion.saldo_global)
    nueva_fecha_vencimiento = FECHA_ACTUAL + nuevo_plazo
    
    ACTUALIZAR_OPERACION(operacion, {
        saldo_pendiente: liquidacion.saldo_global,
        nueva_fecha_vencimiento: nueva_fecha_vencimiento
    })
FIN FUNCION