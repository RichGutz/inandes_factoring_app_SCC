BACKDOOR_LIQUIDATION_SYSTEM

FUNCTION aplicar_backdoor(liquidacion_id, usuario_clave):
    IF NOT autenticar_usuario(usuario_clave, "BACKDOOR_ACCESS"):
        RETURN "Error: Clave no autorizada"
    
    liquidacion = obtener_liquidacion(liquidacion_id)
    IF liquidacion.estado != "LIQUIDACION_EN_PROCESO":
        RETURN "Error: Solo aplicable a liquidaciones en proceso"
    
    saldo_actual = liquidacion.saldo_global
    IF saldo_actual == 0:
        RETURN "Saldo ya es cero"
    
    historial_backdoor = []
    
    // FASE 1: Reducir Moratorios hasta cero
    WHILE liquidacion.moratorios > 0 AND saldo_actual > 0:
        reduccion = min(liquidacion.moratorios, saldo_actual)
        liquidacion.moratorios -= reduccion
        saldo_actual -= reduccion
        historial_backdoor.append(f"Moratorios reducidos: {reduccion}")
    
    // FASE 2: Reducir Compensatorios hasta cero  
    WHILE liquidacion.compensatorios > 0 AND saldo_actual > 0:
        reduccion = min(liquidacion.compensatorios, saldo_actual)
        liquidacion.compensatorios -= reduccion
        saldo_actual -= reduccion
        historial_backdoor.append(f"Compensatorios reducidos: {reduccion}")
    
    // FASE 3: Reducir Capital hasta cero
    WHILE liquidacion.capital_remanente > 0 AND saldo_actual > 0:
        reduccion = min(liquidacion.capital_remanente, saldo_actual)
        liquidacion.capital_remanente -= reduccion
        saldo_actual -= reduccion
        historial_backdoor.append(f"Capital reducido: {reduccion}")
    
    liquidacion.saldo_global = 0
    liquidacion.estado = "LIQUIDADO_BACKDOOR"
    guardar_liquidacion(liquidacion)
    
    RETURN {
        "estado": "BACKDOOR_APLICADO",
        "saldo_final": 0,
        "historial": historial_backdoor,
        "timestamp": obtener_fecha_actual()
    }
END FUNCTION